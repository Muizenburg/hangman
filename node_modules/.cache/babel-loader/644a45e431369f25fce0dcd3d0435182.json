{"ast":null,"code":"var _jsxFileName = \"/Users/MattMuiz/Documents/GitHub/hangman/src/components/Hangman.js\";\nimport React, { Component } from \"react\";\nimport \"./Hangman.css\";\nimport { randomCountry } from \"./Words.js\";\nimport { randomFact } from \"./fact.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport step0 from \"./images/0.jpg\";\nimport step1 from \"./images/1.jpg\";\nimport step2 from \"./images/2.jpg\";\nimport step3 from \"./images/3.jpg\";\nimport step4 from \"./images/4.jpg\";\nimport step5 from \"./images/5.jpg\";\nimport step6 from \"./images/6.jpg\";\n\nclass Hangman extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleGuess = e => {\n      let letter = e.target.value;\n      this.setState(st => ({\n        guessed: st.guessed.add(letter),\n        mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1)\n      }));\n    };\n\n    this.resetButton = () => {\n      this.setState({\n        mistake: 0,\n        guessed: new Set([]),\n        answer: randomCountry(),\n        word: randomFact()\n      });\n    };\n\n    this.state = {\n      mistake: 0,\n      guessed: new Set([]),\n      answer: randomCountry(),\n      word: randomFact()\n    };\n  }\n\n  guessedWord() {\n    return this.state.answer.split(\"\").map(letter => this.state.guessed.has(letter) ? letter : \" _ \");\n  }\n\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(letter => /*#__PURE__*/React.createElement(Button, {\n      variant: \"dark\",\n      class: \"btn btn-lg btn-primary m-2\",\n      key: letter,\n      value: letter,\n      onClick: this.handleGuess,\n      disabled: this.state.guessed.has(letter),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, letter));\n  }\n\n  render() {\n    const gameOver = this.state.mistake >= this.props.maxWrong;\n    const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n    let gameStat = this.generateButtons();\n\n    if (isWinner) {\n      gameStat = /*#__PURE__*/React.createElement(Alert, {\n        variant: \"success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Alert.Heading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }, \"You've won, Well done!\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }, \"Fun fact: \", this.state.word), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"mb-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }, \"Click reset to play again.\"));\n    }\n\n    if (gameOver) {\n      gameStat = /*#__PURE__*/React.createElement(Alert, {\n        variant: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Alert.Heading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, \"You've lost, better luck next time!\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }\n      }, \"Fun fact: \", this.state.word), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"mb-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }, \"Click reset to play again.\"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"HangmanContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"Hangman - Africa!\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, \"Wrong Guesses: \", this.state.mistake, \" of \", this.props.maxWrong), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.props.images[this.state.mistake],\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, \"Guess the African country:\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, !gameOver ? this.guessedWord() : this.state.answer), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, gameStat), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-info\",\n      onClick: this.resetButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, \"Reset\")));\n  }\n\n}\n\nHangman.defaultProps = {\n  maxWrong: 6,\n  images: [step0, step1, step2, step3, step4, step5, step6]\n};\nexport default Hangman;","map":{"version":3,"sources":["/Users/MattMuiz/Documents/GitHub/hangman/src/components/Hangman.js"],"names":["React","Component","randomCountry","randomFact","Button","Alert","step0","step1","step2","step3","step4","step5","step6","Hangman","constructor","props","handleGuess","e","letter","target","value","setState","st","guessed","add","mistake","answer","includes","resetButton","Set","word","state","guessedWord","split","map","has","generateButtons","render","gameOver","maxWrong","isWinner","join","gameStat","images","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Hangman.css\";\nimport { randomCountry } from \"./Words.js\";\nimport { randomFact } from \"./fact.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport step0 from \"./images/0.jpg\";\nimport step1 from \"./images/1.jpg\";\nimport step2 from \"./images/2.jpg\";\nimport step3 from \"./images/3.jpg\";\nimport step4 from \"./images/4.jpg\";\nimport step5 from \"./images/5.jpg\";\nimport step6 from \"./images/6.jpg\";\n\nclass Hangman extends Component {\n  static defaultProps = {\n    maxWrong: 6,\n    images: [step0, step1, step2, step3, step4, step5, step6],\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mistake: 0,\n      guessed: new Set([]),\n      answer: randomCountry(),\n      word: randomFact(),\n    };\n  }\n\n  handleGuess = (e) => {\n    let letter = e.target.value;\n    this.setState((st) => ({\n      guessed: st.guessed.add(letter),\n      mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1),\n    }));\n  };\n\n  guessedWord() {\n    return this.state.answer\n      .split(\"\")\n      .map((letter) => (this.state.guessed.has(letter) ? letter : \" _ \"));\n  }\n\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map((letter) => (\n      <Button\n        variant=\"dark\"\n        class=\"btn btn-lg btn-primary m-2\"\n        key={letter}\n        value={letter}\n        onClick={this.handleGuess}\n        disabled={this.state.guessed.has(letter)}\n      >\n        {letter}\n      </Button>\n    ));\n  }\n\n  resetButton = () => {\n    this.setState({\n      mistake: 0,\n      guessed: new Set([]),\n      answer: randomCountry(),\n      word: randomFact(),\n    });\n  };\n\n  render() {\n    const gameOver = this.state.mistake >= this.props.maxWrong;\n    const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n    let gameStat = this.generateButtons();\n\n    if (isWinner) {\n      gameStat = (\n        <Alert variant=\"success\">\n          <Alert.Heading>You've won, Well done!</Alert.Heading>\n          <p>Fun fact: {this.state.word}</p>\n          <hr />\n          <p className=\"mb-0\">Click reset to play again.</p>\n        </Alert>\n      );\n    }\n\n    if (gameOver) {\n      gameStat = (\n        <Alert variant=\"danger\">\n          <Alert.Heading>You've lost, better luck next time!</Alert.Heading>\n          <p>Fun fact: {this.state.word}</p>\n          <hr />\n          <p className=\"mb-0\">Click reset to play again.</p>\n        </Alert>\n      );\n    }\n\n    return (\n      <div className=\"HangmanContainer\">\n        <h1 className=\"text-center\">Hangman - Africa!</h1>\n        <div className=\"float-right\">\n          Wrong Guesses: {this.state.mistake} of {this.props.maxWrong}\n        </div>\n        <div className=\"text-center\">\n          <img src={this.props.images[this.state.mistake]} alt=\"\" />\n        </div>\n        <div className=\"text-center\">\n          <p>Guess the African country:</p>\n          <p>{!gameOver ? this.guessedWord() : this.state.answer}</p>\n          <p>{gameStat}</p>\n          <button className=\"btn btn-info\" onClick={this.resetButton}>\n            Reset\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Hangman;\n"]},"metadata":{},"sourceType":"module"}